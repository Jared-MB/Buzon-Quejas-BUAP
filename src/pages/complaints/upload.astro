---
import { CardBody, CardFooter } from "@/components/ui/card";
import { Input, InputContainer, InputDescription } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { DatePicker } from "@/components/ui/date-picker";
import { Label } from "@/components/ui/label";
import FormLayout from "@/layouts/FormLayout.astro";
import { Button } from "@/components/ui/button";
import Link from "@/components/ui/Link.astro";
---

<FormLayout title="Hacer una queja | BUAP">
    <h2
        class="text-3xl p-6 pb-4 font-medium flex flex-row gap-x-2 items-center"
    >
        Hacer una queja
    </h2>
    <CardBody>
        <InputContainer>
            <Label>Queja</Label>
            <Input name="title" placeholder="¿Qué pasó?" />
        </InputContainer>
        <InputContainer>
            <Label>Descripción</Label>
            <Textarea
                name="description"
                placeholder="Cuentanos más sobre lo que pasó..."
                rows={4}
            />
        </InputContainer>
        <InputContainer>
            <Label>Fecha <small>(opcional)</small></Label>
            <DatePicker client:load />
            <InputDescription>Día en que ocurrio el incidente</InputDescription>
        </InputContainer>
        <InputContainer>
            <Label>Ubicación <small>(opcional)</small></Label>
            <Input name="location" placeholder="Facultad de ..." />
            <InputDescription>Lugar donde ocurrio el incidente</InputDescription
            >
        </InputContainer>
    </CardBody>
    <CardFooter className="justify-end gap-x-4">
        <Link href="/" styledAsButton> Cancelar </Link>
        <Button type="submit">Enviar queja</Button>
    </CardFooter>
</FormLayout>

<script>
    import { $ } from "@/lib/dom";
    import { ComplaintValidator } from "@/validators/complaint.validator";
    import { toast } from "sonner";

    const form = $("form") as HTMLFormElement;

    if (form) {
        form.addEventListener("submit", async (e) => {
            e.preventDefault();

            const id = toast.loading("Enviando queja...");
            const formData = new FormData(form);
            const data = Object.fromEntries(formData.entries());

            const parsedData = ComplaintValidator.safeParse({
                ...data,
                id: crypto.randomUUID(),
                status: "pending",
                userId: crypto.randomUUID(),
            });

            if (!parsedData.success) {
                console.error(parsedData.error.flatten().fieldErrors);
                return;
            }

            const response = await fetch("/api/complaint", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(parsedData.data),
            });

            if (!response.ok) {
                toast.error("Ocurrio un error al enviar la queja", {
                    id,
                });
                return;
            }

            toast.success("Queja enviada correctamente", {
                id,
            });
            window.location.href = "/";
        });
    }
</script>
